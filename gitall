#!/bin/bash
# Function to handle errors
handle_error() {
    local exit_code=$1
    local message=$2
    echo "Error: $message"
    exit $exit_code
}

# Usage
if [ $# -lt 1 ]; then
    handle_error 1 "Usage: $0 <pull or push>"
fi

# Check if stdin is empty
#if [ -t 0 ]; then
    #echo "Error: No input provided on stdin" >&2
    #exit 1
#fi

for repo in $(cat $HOME/.githubrepos); do
  cd $HOME
  echo "---------- REPO: $repo ----------"
  if [ $1 == "push" ]; then
    ! [ -d "$repo" ] && handle_error 1 "$repo doesn't exist"
    [ "$repo" == "/home/benny/.dotfiles" ] && pushdots && continue
    cd "$repo"
    git add .
    git commit -m "gitpushcommand $(date '+%D' | tr '/' '-')"
    git push -u origin main
  elif [ $1 == "pull" ]; then
    #! [ -d "$repo" ] && echo "$repo doesn't exist, creating" >&2 && mkdir -p "$repo" && cd "$repo" && git init
    if [ -d "$repo" ]; then
      [ "$repo" == "/home/benny/.dotfiles" ] && pulldots && continue
      cd "$repo"
      git pull origin main
      if [ "$repo" == "/home/benny/suckless" ]; then
        for dir in $(find "/home/benny/suckless" -maxdepth 1 -type d -name '[^.]*' | tail -n +2); do
          cd "$dir"
          sudo make clean install >/dev/null
        done
      fi
    else
      git=${repo##*/}
      cd $HOME
      echo "repo doesn't exist, cloning" >&2
      git clone "https://github.com/benz1234567/$git.git"
    fi
  fi
done
