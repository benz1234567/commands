#!/bin/bash
# Function to handle errors
handle_error() {
    local exit_code=$1
    local message=$2
    echo "Error: $message"
    exit $exit_code
}

# Usage
#if [ $# -lt 1 ]; then
#    handle_error 1 "Usage: $0 <cutfile> <videofile> <output filename>"
#fi

# Check if stdin is empty
#if [ -t 0 ]; then
    #echo "Error: No input provided on stdin" >&2
    #exit 1
#fi

tts() {
    # Read input string into an array, splitting by colon
    IFS=':' read -r -a time_parts <<< "$1"

    # Initialize default values
    hh=0
    mm=0
    ss=0

    times=0
    # Process the array backwards
    for ((i=${#time_parts[@]}-1; i>=0; i--)); do
      if [[ $times -lt 3 ]]; then
        times=$((times + 1))
        [[ $times == 1 ]] && ss="${time_parts[i]}"
        [[ $times == 2 ]] && mm="${time_parts[i]}"
        [[ $times == 3 ]] && hh="${time_parts[i]}"
      else
        continue
      fi
    done

     # Remove leading zeros
    hh="${hh#0}"
    mm="${mm#0}"
    ss="${ss#0}"

    # If any value is empty after removing leading zeros, set it to 0
    hh="${hh:-0}"
    mm="${mm:-0}"
    ss="${ss:-0}"

    # Calculate total seconds
    total_seconds=$((hh * 3600 + mm * 60 + ss))
    echo "$total_seconds"
}

cuts=()
cute=()

while read -r line; do
  start=$(cut -d'-' -f 1 <<< $line)
  end=$(cut -d'-' -f 2 <<< $line)
  cuts+=("$(tts $start)")
  cute+=("$(tts $end)")
done < "$1"

[[ ${#cuts[@]} == ${#cute[@]} ]] || handle_error 1 "cuts not equal to cute"

read -r -d '' command1 << EOM
ffmpeg -i "$2" -vf "select='not(between(t,
EOM
read -r -d '' command2 << EOM
', setpts=N/FRAME_RATE/TB" -af "aselect='not(between(t,
EOM
read -r -d '' command3 << EOM
', asetpts=N/SR/TB" "$3"
EOM

for i in $(seq 0 $((${#cuts[@]} - 1))); do
  command1+="${cuts[i]},${cute[i]})+between(t,"
  command2+="${cuts[i]},${cute[i]})+between(t,"
done

c1="${command1%+between(t,})"
c2="${command2%+between(t,})"
eval "$c1$c2$command3"
